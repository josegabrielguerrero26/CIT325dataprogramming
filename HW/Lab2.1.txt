
DROP TYPE table_list;
DROP TYPE table_struct;

/* Create the record type structure. */
CREATE OR REPLACE
  TYPE table_struct IS OBJECT
  ( table_name    VARCHAR2(30)
  , column_cnt    NUMBER
  , row_cnt       NUMBER );
/

/* Create the collection of a record type structure. */
CREATE OR REPLACE
  TYPE table_list IS TABLE OF table_struct;
DROP TYPE table_list
*
ERROR at line 1:
ORA-04043: object TABLE_LIST does not exist


SQL> DROP TYPE table_struct
*
ERROR at line 1:
ORA-04043: object TABLE_STRUCT does not exist


SQL> SQL> SQL>   2    3    4    5    6  
Type created.

SQL> SQL> SQL>   2    3  /

Type created.

/* Drop the function before attempting to create it. */
SQL> DROP FUNCTION listing;
DROP FUNCTION listing
*
ERROR at line 1:
ORA-04043: object LISTING does not exist


SQL> 
SQL> /* Create the listing function. */
SQL> CREATE OR REPLACE
  2  FUNCTION listing RETURN table_list IS
  3  
  4    /* Variable list. */
  5    lv_column_cnt  NUMBER;
  6    lv_row_cnt     NUMBER;
  7  
  8    /* Declare a statement variable. */
  stmt  VARCHAR2(200);
 10  
 11    /* Declare a system reference cursor variable. */
 12    lv_refcursor  SYS_REFCURSOR;
 13    lv_table_cnt  NUMBER;
 14  
 15    /* Declare an output variable.  */
  lv_list  TABLE_LIST := table_list();
 17  
 18    /* Declare a table list cursor that excludes APEX tables. */
 19    CURSOR c IS
 20      SELECT table_name
 21      FROM   user_tables
 22      WHERE  table_name NOT IN
 23              ('DEPT','EMP','APEX$_ACL','APEX$_WS_WEBPG_SECTIONS','APEX$_WS_ROWS'
 24              ,'APEX$_WS_HISTORY','APEX$_WS_NOTES','APEX$_WS_LINKS'
 25              ,'APEX$_WS_TAGS','APEX$_WS_FILES','APEX$_WS_WEBPG_SECTION_HISTORY'
 26              ,'DEMO_USERS','DEMO_CUSTOMERS','DEMO_ORDERS','DEMO_PRODUCT_INFO'
 27              ,'DEMO_ORDER_ITEMS','DEMO_STATES','DEMO_TAGS'
,'DEMO_TAGS_TYPE_SUM','DEMO_TAGS_SUM','DEMO_CONSTRAINT_LOOKUP');
 29  
 30    /* Declare a column count. */
 31    CURSOR cnt
  ( cv_table_name  VARCHAR2 ) IS
 33      SELECT   table_name
    ,        COUNT(column_id) AS cnt_columns
 35      FROM     user_tab_columns
 36      WHERE    table_name = cv_table_name
 37      GROUP BY table_name;
 38  
 39  BEGIN
 40    /* Read through the data set of non-environment variables. */
 41    FOR i IN c LOOP
 42  
 43      /* Count the columns of a table. */
    FOR j IN cnt(i.table_name) LOOP
 45        lv_column_cnt := j.cnt_columns;
 46      END LOOP;
 47  
 48      /* Declare a statement. */
    stmt := 'SELECT COUNT(*) AS column_cnt FROM '||i.table_name;
 50  
 51      /* Open the cursor and write set to collection. */
 52      OPEN lv_refcursor FOR stmt;
 53      LOOP
 54        FETCH lv_refcursor INTO lv_table_cnt;
 55        EXIT WHEN lv_refcursor%NOTFOUND;
 56        lv_list.EXTEND;
      lv_list(lv_list.COUNT) := table_struct(
 58                                      table_name => i.table_name
 59                                    , column_cnt => lv_column_cnt
                                  , row_cnt    => lv_table_cnt );
 61      END LOOP;
 62    END LOOP;
 63  
 64    RETURN lv_list;
 65  END;
 66  /

Function created.

COL table_name   FORMAT A20     HEADING "Table Name"
SQL> COL column_cnt   FORMAT 9,999  HEADING "Column #"
SQL> COL row_cnt      FORMAT 9,999  HEADING "Row #"
SQL> SELECT table_name
  2  ,      column_cnt
  3  ,      row_cnt
  4  FROM   TABLE(listing);

Table Name           Column #  Row #
-------------------- -------- ------
SYSTEM_USER                11      5
COMMON_LOOKUP              10     49
MEMBER                      9     10
CONTACT                    10     18
ADDRESS                    10     18
STREET_ADDRESS              8     28
TELEPHONE                  11     18
RENTAL                      8  4,694
ITEM                       14     93
RENTAL_ITEM                 9  4,703
PRICE                      11    558
TRANSACTION                12  4,694
CALENDAR                    9    300
AIRPORT                     9      6
ACCOUNT_LIST                8    200

15 rows selected.

SQL> 
